/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF_L 0
#define NAV_L 1
#define NUM_L 2
#define GME_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
			quick_tap_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
		td: tapdance {
			compatible = "zmk,behavior-hold-tap";
			label = "tap dance";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick_tap_ms = <200>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q          &kp W      &kp E        &kp R          &kp T        &kp Y                  &kp U          &kp I           &kp O         &kp P
                &kp A          &kp S      &hm LALT D   &hm LGUI  F    &kp G        &kp H                  &hm RGUI J     &hm RALT K      &kp L         &kp SEMI
                &kp Z          &kp X      &kp C        &kp V          &kp B        &kp N                  &kp M          &td EXCL COMMA  &td QMARK DOT &kp BKSP
                                                       &kp SPACE      &sk LSHIFT   &sk RCTRL              &to NAV_L
            >;
        };

        nav_layer {
            bindings = <      
                &kp ESC        &kp C_PP   &kp C_PREV   &kp C_NEXT     &kp C_STOP   &bt BT_SEL 0           &kp HOME       &kp PG_DN       &kp PG_UP     &kp END
                &kp TAB        &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP   &none        &bt BT_SEL 1           &kp LARW       &kp DARW        &kp UARW      &kp RARW
                &to GME_L      &none      &none        &none          &bt BT_CLR   &bt BT_SEL 2           &none          &none           &none         &kp ENTER
                                                       &to DEF_L      &sk LALT     &kp ESC                &to NUM_L
            >;
        };

        num_layer {
            bindings = <      
                &td AT HASH    &kp PRCNT  &kp LBRC     &kp RBRC       &kp BSLH     &kp FSLH               &kp N7         &kp N8          &kp N9        &td UNDER MINUS
                &td GRAVE APOS &kp DQT    &kp LPAR     &kp RPAR       &kp EQUAL    &td CARET KP_MULTIPLY  &kp N4         &kp N5          &kp N6        &kp PLUS
                &kp AMPS       &kp DLLR   &kp LBKT     &kp RBKT       &kp PIPE     &kp DOT                &kp N1         &kp N2          &kp N3        &kp ENTER
                                                       &to DEF_L      &kp LGUI     &kp N0                 &none 
            >;
        };

		gaming_layer {
            bindings = <
                &kp ESC        &kp Q      &kp W        &kp E          &kp R        &kp RC(LS(TAB))        &mkp LCLK      &mmv MOVE_UP    &mkp RCLK        &mwh SCROLL_UP
                &kp LSHIFT     &kp A      &kp S        &kp D          &kp F        &kp RC(TAB)            &mmv MOVE_LEFT &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mwh SCROLL_DOWN
                &kp LCTRL      &kp Z      &kp X        &kp C          &kp V        &mkp MCLK              &mkp MB4       &mkp MB5        &mwh SCROLL_LEFT &mwh SCROLL_RIGHT
                                                       &kp SPACE      &none        &none                  &to NAV_L 
            >;
        };
    };
};
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Y &kp C &kp L &kp M &kp K 						&kp Z &kp F  &kp U    &td MINUS COMMA  &kp BKSP 
		&kp I &kp S &hm LALT R &hm LGUI T &kp G 			       	&kp P &hm RGUI N &hm RALT E &kp A &kp O
		&kp Q &kp V &kp W &kp D &kp J				        &kp B &kp H  &td UNDERSCORE SLASH &td EXCL DOT &kp X
          				&mt LC(LS(LALT)) SPC &sk LSHIFT  				&sk RCTRL &to 1
		>;
		};

       		left_layer {
		bindings = <
		&kp ESC  &kp ATSN   &td LC(LG(LS(N4))) LS(N3) &kp DLLR    &kp PRCNT		&kp CARET &kp LS(COMMA) &kp LS(DOT) &kp SEMI &kp BKSP 
		&kp TAB    &kp EQUAL    &kp LA(RBKT)      &kp LA(LS(RBKT))     &kp SQT 		&kp BSLH &kp LBRC  &kp RBRC &kp PIPE  &kp ENTER
		&kp TILDE    &kp LA(N3) 	&kp LA(LBKT) &kp LA(LS(LBKT))  &kp DQT 	&kp LBKT &kp LPRN &kp RPRN &kp RBKT  &to 3 
					    &to 0  &sk LSHIFT  					&sk RALT &to 2 
		>;
		};
		
		right_layer {
		bindings = <
		&kp ESC  &kp C_PP &kp C_PREV  &kp C_NEXT  &kp LS(MINUS)    			&kp MINUS  &kp N7 &kp N8 &kp N9 &trans
		&kp TAB  &trans   &kp C_VOL_DN  &kp C_VOL_UP  &kp LS(EQUAL) 			&kp EQUAL &kp N4  &kp N5  &kp N6   &kp ENTER
		&to 4  &kp AMPS &kp SLASH &kp STAR &kp DOT    			&kp N0 &kp N1 &kp N2 &kp N3  &trans 
					  &to 0 &sk LGUI  				&sk RALT  &to 2 
		>;
		};
		
		tri_layer {
		bindings = <
		&trans  &mwh SCROLL_LEFT    &mmv MOVE_UP    &mwh SCROLL_RIGHT    &kp NUM_5 			&kp LG(LBKT)   &kp LC(LS(TAB))   &kp RC(TAB) &kp LG(RBKT) &trans
		&kp F1 &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &kp DEL  						&kp LEFT &kp DOWN  &kp UP &kp RIGHT &kp ENTER 
		&td LG(GRAVE) GRAVE &mkp RCLK  &mwh SCROLL_UP &mwh SCROLL_DOWN &trans   				&mkp LCLK &kp PG_DN  &kp K_VOL_DN  &trans &trans   
					 &to 0 &trans  					&sk RALT &to 1 
		>;
		};	
		bt {
		bindings = <
		&trans  &trans &trans &trans &trans &trans &trans &trans &trans &trans 
		&trans  &trans &trans &trans &trans &trans &trans &trans &trans &trans 
		&bt BT_PRV  &bt BT_NXT &bt BT_CLR &trans &trans   				&trans &trans  &trans  &trans &trans   
					 &to 0 &trans  					&trans &to 1 
		>;
		};	
        
	};
};
